#+TITLE: API: client and server


The API server starts with ~/api/~.

* Client
:PROPERTIES:
:ID:       737e5278-0a51-42f7-bb5a-3bfa45bebf22
:END:

In [[file:pgui/src/main.js][main.js]] There's a line that loads ~/js/pgAPI.js~

#+begin_src js
import pgAPI from './src/js/pgAPI.js'
window.pgAPI = pgAPI;
#+end_src

** ~new SqlStatement({ text: <text>, name: <name>, server: uuid})~

We want to separate a bunch of things from the GUI. ~SqlStatement~'s are not a part of the UI per se, but certainly a part of the API.

#+begin_src js :noweb-ref SqlStatement

export function SqlStatement(obj) {
    Object.assign(this, obj);
};

SqlStatement.prototype.isPrepared = function () {
    return typeof this.name === "string"
}

SqlStatement.prototype.prepare = function (obj) {
   Object.assign(this, obj);
    console.log('Prepping', this)
    if (this.isPrepared()) {
        return new Promise((resolve, reject) => { resolve(this) });
    } else {
        return pgAPI.post('prepare', this).then(e => {
            console.log('SqlStatement was prepped', e)
            Object.assign(this, e.data)
            return this
        })
    }
};

SqlStatement.prototype.query = function (obj) {
    Object.assign(this, obj)
    if (this.isPrepared()) {
        return pgAPI.post('query', this).then(q => {
            const res = Object.assign(Object.create(this), q.data)
            console.log('Query Results:', res)
            return res;
        })
    
    } else {
        return this.prepare(obj).then(stmt => this.query(stmt))
    }       
}

SqlStatement.prototype.columnHeaders = function () {
        return this.columns.map(c => c[0])
}

SqlStatement.prototype.resultRows = function () {
    return this.results.map(a => Array.isArray(a) ? a : [a])
}
#+end_src



** ~pgAPI~ module and Object


We want the UI to react to changes. We also want it to be very simple both on code and understanding said code.

This seems to work in exactly that way!

We can make the API reactive and have ~pgAPI.api~ as a reference to itself.

#+begin_src javascript :noweb-ref re-pg-api
export const api = reactive(pgAPI);
pgAPI.api = api;
#+end_src

** Postgres Servers

In [[id:27a4619b-e979-4b25-b154-6fff38826791][Login Client]] after loging in we set a uuid. So, if we have such a property
this server is live.

#+begin_src js :noweb-ref isServerLive
export function isServerLive(server) {
    return server.hasOwnProperty('uuid');
}
#+end_src

Servers have a prototype.

#+begin_src js :noweb-ref pgServer
export const pgServer = _pgServer
pgServer.prototype.isLive = function() { return isServerLive(this); }
#+end_src


** file pgAPI.js
:PROPERTIES:
:ID:       af8e629a-0cb3-4f2c-9f71-92ad76e6eb2c
:END:
Here's where that file is tangled.

#+begin_src js :tangle "pgui/src/assets/js/pgAPI.js" :noweb yes
import { get as aget, post as apost} from './api/axios'
import { pgServer as _pgServer} from './api/servers'
import { Report } from './api/report'
export { Report };
import "./api/status"
import { reactive, ref } from 'vue';

import { getServersHistory,
         setServersHistoryItem,
         openHistoryDB,
         DB } from './history'

export function historyDB() { return DB; }

export const version = 0.1

export const get = aget;
export const post = apost;

export const resultCache = []

<<isServerLive>>

<<pgServer>>

export const pgAPI = {
    version, get, post, ref,
    getServersHistory, setServersHistoryItem, historyDB,
    isServerLive, pgServer,
    resultCache, Report

}

<<SqlStatement>>

pgAPI.SqlStatement = SqlStatement;
<<re-pg-api>>


export const servers = ref([]);

export function serverStatus (srv) {

    return post('status', srv);

};

pgAPI.serverStatus = serverStatus;

const serversHistory = []

        // await getServersHistory() .then(h => h.map(s => new pgServer(s)));

export async function liveServers() {
    const lv = []
    await openHistoryDB();
    console.log("Have HistoryDB", DB);
    await getServersHistory()
        .then(h => h.map(s => serversHistory.push(new pgServer(s))));
    await Promise.all(serversHistory.map(async (s) => {
        // console.log("Find server status ", s);
        const st = await pgAPI.serverStatus(s)
        //console.log("Found server status ", st);
        if (st.data && st.data.connected) {
            lv.push(s)
        }

    }));
    servers.value = lv
    console.log('Set SErvers, ', currentServer(), servers.value)
    return lv;
}

pgAPI.liveServers = liveServers;



export function currentServer() {
  return servers.value && servers.value.length > 0 ? servers.value.slice(-1)[0] : false;
}

pgAPI.currentServer = currentServer;


api.servers = servers;






export default pgAPI;
#+end_src
