#+TITLE: Reports

#+begin_src js :tangle pgui/src/assets/js/api/report.js
import { get, post } from './axios.js'

export const reportInterface = {
    query: String,
    name: String,
    description: String,
    filename: String,
    sheetnames: Array
}

export function Report(r) {
    Object.assign(this, r);
     for (const prop in r) {
        if(!reportInterface[prop]) {
            throw "Property not allowed in Report constructor: " + prop
        }
    }

    for (const prop in reportInterface) {
        if(!this[prop]) {
            throw "Report must have a property named"+ prop
        }
    }
}

Report.prototype.save = function() {
    return post('save-report', this).then(r => r.data);
}


#+end_src

* Save/Load

#+begin_src scheme :tangle api/report.ss
(export #t)
(import :drewc/db/postgresql  :drewc/db/postgresql-driver
        :drewc/db/dbi
        :drewc/pgui/conf
        :drewc/pgui/catalog
        :drewc/pgui/api/login
        :drewc/ftw
        :std/sugar (only-in :std/error error-irritants)
        :std/text/json
        :std/misc/uuid
        :std/misc/ports
        )

(def (report-path-expand path)
  (path-expand path pgui-report-path))

(def (save-report r)
  (let-hash r
    (write-file-string
     (report-path-expand (string-append .uuid ".json"))
     (with-output-to-string "" (cut write-json r)))))

(define-json-endpoint save-report "/api/save-report")

(def (save-report/POST)
   (def r  (http-request-body-json*))
   (let (u (hash-get r 'uuid))
     (unless u (hash-put! r 'uuid (uuid->string (random-uuid)))))
   (try
    (save-report r)
    (respond/JSON r)
    (catch (e)
      (respond/JSON
      ; code: 500
       (list->hash-table
        `((error . ,(with-output-to-string
                      ""
                      (cut ##display-exception e (current-output-port))))))))))
#+end_src

* Spreadsheets

** Workbook File types

#+begin_src js :noweb-ref sheetFileTypes
const _ftds = [
    ['file', 'ext',	'container',	'sheets',	'Description'],
    ['xlsx',	'.xlsx',	'ZIP',	'multi',	'Excel 2007+ XML Format'],
    ['xlsm',	'.xlsm',	'ZIP',	'multi',	'Excel 2007+ Macro XML Format'],
    ['xlsb',	'.xlsb',	'ZIP',	'multi',	'Excel 2007+ Binary Format'],
    ['biff8',	'.xls',	'CFB',	'multi',	'Excel 97-2004 Workbook Format'],
    ['biff5',	'.xls',	'CFB',	'multi',	'Excel 5.0/95 Workbook Format'],
    ['biff4','.xls','none','single','Excel 4.0 Worksheet Format'],
    ['biff3',	'.xls',	'none',	'single',	'Excel 3.0 Worksheet Format'],
    ['biff2',	'.xls',	'none',	'single',	'Excel 2.0 Worksheet Format'],
    ['xlml',	'.xls',	'none',	'multi',	'Excel 2003-2004 (SpreadsheetML)'],
    ['ods',	'.ods',	'ZIP',	'multi',	'OpenDocument Spreadsheet'],
    ['fods',	'.fods',	'none',	'multi',	'Flat OpenDocument Spreadsheet'],
    ['csv',	'.csv',	'none',	'single',	'Comma Separated Values'],
    ['txt',	'.txt',	'none',	'single',	'UTF-16 Unicode Text (TXT)'],
    ['sylk',	'.sylk',	'none',	'single',	'Symbolic Link (SYLK)'],
    ['html',	'.html',	'none',	'single',	'HTML Document'],
    ['dif',	'.dif',	'none',	'single',	'Data Interchange Format (DIF)'],
    ['dbf',	'.dbf',	'none',	'single',	'dBASE II + VFP Extensions (DBF)'],
    ['rtf',	'.rtf',	'none',	'single',	'Rich Text Format (RTF)'],
    ['prn',	'.prn',	'none',	'single',	'Lotus Formatted Text'],
    ['eth',	'.eth',	'none',	'single',	'Ethercalc Record Format (ETH)']
]


const sheetFileTypes = _ftds.slice(1).map((desc) => {
    const o = {};
    const props = _ftds[0]
    for (let i in desc) {
        o[props[i]] = desc[i]
    }
    return o
})

XLSX.utils.sheet_file_types = sheetFileTypes;



#+end_src

** Download from result

First, create a workbook with the result as a sheet which we'll simply name "Sheet" by default.

#+begin_src js :noweb-ref sql_result_to_book
XLSX.utils.sql_result_to_book = function (result, name = "Sheet") {

   const wb = this.book_new();

   this.book_append_sheet(
        wb, this.sql_result_to_sheet(result), name);

    return wb;
}
#+end_src


For downloading we pass the book and a sheet_file_type.

#+begin_src js :noweb-ref sql_result_writeFile
XLSX.sql_result_writeFile = function (result, filename = name, type, name = "Sheet") {

    const wb = this.utils.sql_result_to_book(result, name);
    const ext = type.ext;
    const comp = type.container === "ZIP";

     this.writeFile(wb, filename + ext, { compression: comp });
}
#+end_src


This is how we turn a result into a spreadsheet.

#+begin_src js :noweb-ref sql_result_to_sheet
XLSX.utils.sql_result_to_sheet = function (result) {
    function resultHeaders(res = props.result) {
        return res.columns.map(c => c[0])
    }
    function resultRows(res = props.result) {
        return res.results.map(a => Array.isArray(a) ? a : [a])
    }
    return  XLSX.utils.aoa_to_sheet([
     resultHeaders(result),
     ...resultRows(result)
     ]);
}
#+end_src




* Modal Viewer

#+begin_src html :noweb-ref report-modal-html
<div
    ref="modal" class="uk-modal-full report-result-modal"
    uk-modal>
    <div class="uk-modal-dialog" ref="md" uk-height-viewport>
      <button
        class="uk-modal-close-full uk-close-large"
        type="button" uk-close></button>
    <ClusterizeResult v-if="isModalVisible" :result="reportValue" />
    </div>
  </div>


#+end_src

#+begin_src js :noweb-ref report-modal-script
const isModalVisible = ref(false);

function showModal(modal) {
  console.log("show modal", modal);
  UIkit.modal(modal).show();
  isModalVisible.value = true
  UIkit.util.on(modal, 'hide', () => { modalIsHidden(modal) })
}

function modalIsHidden (modal) {
   isModalVisible.value = false;
}

#+end_src

#+begin_src css :noweb-ref report-modal-css
.report-result-modal {
  position:absolute;
  top:0;
}
.report-result-modal .clusterize-scroll{
  max-height: 95vh;
  max-width: 99vw;
  overflow: auto;
}
.report-result-modal .clusterize .uk-table th {
    top: -1em;
    backround-color: white;
    border: 1px solid grey;
    z-index: 10;
}

.report-result-modal .uk-close-large {
  color: black;
  opacity: 70%;
  border: 1px solid black;
  padding: 0.5em;
}

#+end_src
* View a report


#+begin_src vue :tangle pgui/src/components/ReportViewer.vue :noweb yes
<script setup>
import { ref, computed } from 'vue'
import XLSX from 'xlsx'
import ClusterizeResult from './ClusterizeResult.vue'
import pgAPI from '../assets/js/pgAPI'

const props = defineProps({
    report: Object
})

<<sql_result_to_sheet>>

<<sql_result_to_book>>

<<sql_result_writeFile>>

XLSX.utils.sql_test = function () { return this; }
window.XLSX = XLSX

const error = ref(false)

function normalizedReport() { return props.report }

const reportValue = ref();

function defaultFileName() {
  props.report.name + '_' + new Date().toJSON()
};


const downloadAutomatically = ref(true);

function runReport (server = pgAPI.currentServer()) {
    const rep = normalizedReport();
    const stmt = new pgAPI.SqlStatement(
        { text: rep.query, uuid: server.uuid}
    );

    error.value = undefined;
    return stmt.prepare()
        .then(stmt => {
             console.log('Prepped report', stmt)
          return stmt.query().then(rstmt => {
              Object.assign(stmt, rstmt)
              console.log('Ran Report', stmt)
              reportValue.value = stmt
              if (downloadAutomatically.value) {
                  XLSX.sql_result_writeFile(
                      stmt, fileName.value, selectedFileType.value);
              }
              return stmt;
          })

        })
}

<<sheetFileTypes>>

const selectedFileType = ref(sheetFileTypes[0])

<<report-modal-script>>

</script>

<template>
<form class="uk-grid-small" uk-grid>
  <div class="uk-width-1-2">
    <label class="uk-form-label">Name</label>
      <input class="uk-input" type="text" placeholder="Report Name" v-model="report.name">
    </div>
    <div class="uk-width-1-2@s">
    <label class="uk-form-label">Type</label>
      <select class="uk-select" v-model="selectedFileType">
      <option
        v-for="type in sheetFileTypes"
        :value="type"
        >{{ type.file }}: {{ type.Description }} </option>
      <option>Option 02</option>
    </select>
    </div>
    <div class="uk-width-1-4@s">
    <div class="uk-margin">
      <label><input class="uk-checkbox" type="checkbox"
                    v-model="downloadAutomatically"> Download Automatically?</label>
    </div>
    </div>
    <div class="uk-width-1-4">

  <button class="uk-button" type="button" @click="runReport()"> Run </button>
    </div>

    <div class="uk-width-1-2" v-if="reportValue">
      Done! {{ reportValue.results.length }} rows.
    <div class="uk-button-group">

      <button v-if="!downloadAutomatically"
              class="uk-button" type="button" @click="runReport()"> Download </button>&nbsp;
  <button class="uk-button" type="button" @click="showModal($refs.modal)"> View </button>
    </div>
    </div>
</form>
<<report-modal-html>>
</template>

<style>
  <<report-modal-css>>
</style>
#+end_src

* /File/ ~ReportEditor.vue~

#+begin_src vue :tangle pgui/src/components/ReportEditor.vue
<script setup>
import { ref, computed } from 'vue'
import CodeMirror from './CodeMirror.vue'
import PreView from './ReportViewer.vue'
import { Report } from '../assets/js/pgAPI'

const props = defineProps({
    query: String,
    SQLQuery: Object,
    cacheNum: Number
})

const error = ref()

const description = ref("")
const repQuery = ref(props.query)

const report = ref({ name: undefined });
const sheetNames = ref([]);

function title () {
 if (report.value.uuid) {
  return "Edit Report"
 }
 return "Save New Report"
}
if (props.SQLQuery)  {
    const q = props.SQLQuery
    report.value = { SQLQuery: q }
    sheetNames.value = q.results.filter(r =>
        r.isSpreadSheet).map(r => r.sheetName);
    sheetNames.value.forEach((nm, i) => {
        if(!nm) sheetNames.value[i] = 'Sheet ' + (i + 1)
    })
    window.testSQLQuery = q;
}


function saveReport() {
    const self = report.value
   try {
        const rep = new Report({
            query: props.query,
            name: self.name,
            description: description.value,
            filename: self.filename || self.name,
            sheetnames: sheetNames.value
        })
        console.log('New Report', rep)
        rep.save().then(sr => {
            if (sr.error) {
                error.value = sr.error
            } else {
                self.uuid = sr.uuid
            }
        })
            .catch(e => { error.value = e })
    } catch (e) {
        error.value = e
    }

}
function makeReport(name, query, description) {
    return { name: name, description: description, query: query };
}

const mirrorQuery = ref(props.query);

function preview () {

}

</script>

<template>
<h1> {{ title() }}</h1>
<div class="report-codemirror-container">
<CodeMirror @init="mirrorQuery = $event.getValue()"
            ref="CodeMirrorSFC" :setValue="repQuery" />
</div>
<div style="position:relative">
        <div v-if="error" class="uk-alert-danger sql-error" uk-alert>
          <a class="uk-alert-close" @click="error = false"> X </a>
          <p> {{ error.message || error }} </p>
        </div>
</div>
{{ query }}
{{ cacheNum }}
{{ sheetNames }}
<div class="uk-column-1-2 uk-column-divider">
    <input class="uk-input" type="text" placeholder="Report Name" v-model="report.name">
    <input class="uk-input" type="text" placeholder="File Name"
           :value="report.filename || report.name"
           @input="report.filename = $event.target.value">

  <p>
    <textarea class="uk-textarea"
              rows="5"
              placeholder="Description of Report"
              v-model="description">
    </textarea>
    </p>

    <p>
     Sheet Names:
     <input v-for="(n, idx) in sheetNames"
            class="uk-input" type="text" v-model="sheetNames[idx]">
    </p>
    <p>
      <button class="uk-button" type="button"
              @click="preview()"> Preview </button>
      &nbsp;
      <button class="uk-button" type="button" @click="saveReport()"> Save </button>
    </p>
    </div>
 <PreView :report="report" v-if="report" />


</template>

#+end_src
